@startuml

interface Scheduler {}

interface SchedulerEntry {}

class fifoScheduler {
    -queue: CircularQueue[*fifoEntry]
}

class fifoEntry {
    -scheduler: *fifoScheduler
    -enqueued: bool
    -userdata: T
}

class spScheduler {
    -queue: PriorityQueue[float32, *spEntry]
}

class spEntry {
    -scheduler: *spScheduler
    -priority: float32
    -enqueued: bool
    -userdata: T
}

class wfqScheduler {
    -queue: PriorityQueue[float32, *wfqEntry]
    -lastVirtualFinish: float32
}

class wfqEntry {
    -scheduler: *wfqScheduler
    -inverseWeight: float32
    -enqueued: bool
    -lastVirtualFinish: float32
    -userdata: T
}

class datastructures.PriorityQueue #antiquewhite {
    +Enqueue(value: T, priority: K): bool
    +Dequeue(): (T, bool)
}

class datastructures.CircularQueue #antiquewhite {
    +Enqueue(value: T): bool
    +Dequeue(): (T, bool)
}

Scheduler <|.up. fifoScheduler
fifoScheduler *- fifoEntry
fifoEntry .down.|> SchedulerEntry

Scheduler <|.right. spScheduler
spScheduler *- spEntry
spEntry .right.|> SchedulerEntry

Scheduler <|.down. wfqScheduler
wfqScheduler *- wfqEntry
wfqEntry .up.|> SchedulerEntry

fifoScheduler *-- datastructures.CircularQueue

spScheduler *-- datastructures.PriorityQueue
wfqScheduler *-- datastructures.PriorityQueue

@enduml
